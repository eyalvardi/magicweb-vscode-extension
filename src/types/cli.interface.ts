// Generated by https://quicktype.io

interface AngularCLI {
    $schema:        string;
    version:        number;
    newProjectRoot: string;
    projects:       { [project : string] : NgProject};
    defaultProject: string;
}


interface NgProject {
    root:        string;
    sourceRoot:  string;
    projectType: string;
    prefix:      string;
    schematics:  any;
    architect:   Architect;
}

interface Architect {
    build:          Build;
    serve:          Serve;
    "extract-i18n": ExtractI18N;
    test:           Test;
    lint:           Lint;
}

interface Build {
    builder:        string;
    options:        BuildOptions;
    configurations: BuildConfigurations;
}

interface BuildConfigurations {
    production: Production;
}

interface Production {
    fileReplacements: FileReplacement[];
    optimization:     boolean;
    outputHashing:    string;
    sourceMap:        boolean;
    extractCss:       boolean;
    namedChunks:      boolean;
    aot:              boolean;
    extractLicenses:  boolean;
    vendorChunk:      boolean;
    buildOptimizer:   boolean;
    budgets:          Budget[];
}

interface Budget {
    type:           string;
    maximumWarning: string;
    maximumError:   string;
}

export interface FileReplacement {
    replace: string;
    with:    string;
}

export interface BuildOptions {
    outputPath?:  string;
    index?:       string;
    main:         string;
    polyfills:    string;
    tsConfig:     string;
    assets:       string[];
    styles:       string[];
    scripts:      any[];
    karmaConfig?: string;
}

interface ExtractI18N {
    builder: string;
    options: ProductionClass;
}

interface ProductionClass {
    browserTarget: string;
}

interface Lint {
    builder: string;
    options: LintOptions;
}

interface LintOptions {
    tsConfig: string[];
    exclude:  string[];
}

interface Serve {
    builder:        string;
    options:        ProductionClass;
    configurations: ServeConfigurations;
}

interface ServeConfigurations {
    production: ProductionClass;
}

interface Test {
    builder: string;
    options: BuildOptions;
}



